{"ast":null,"code":"import _get from 'lodash/get';\nimport { logout } from './user';\nimport Api from '../utils/Api';\nimport { toast } from \"react-toastify\";\nexport var SET_INDEX = 'SET_INDEX';\nexport var SET_STACKS = 'SET_STACKS';\nexport var SET_STACK = 'SET_STACK';\nexport var ADD_POST = 'ADD_POST';\nexport var setIndex = function setIndex(payload) {\n  return {\n    type: SET_INDEX,\n    payload: payload\n  };\n};\nexport var setStacks = function setStacks(payload) {\n  return {\n    type: SET_STACKS,\n    payload: payload\n  };\n};\nexport var setStack = function setStack(idx, payload) {\n  return {\n    type: SET_STACK,\n    idx: idx,\n    payload: payload\n  };\n};\n/**\n * create auth function with given api function name and redux action\n * @param {String} [apiFuncName] api's property name\n * @param {Function} [actOnSuccess] action creator\n * @return {function} redux-thunk function\n */\n\nvar apiAuthFactory = function apiAuthFactory(apiFuncName, actOnSuccess) {\n  return function (router, arg, toastOnSuccess) {\n    return function (dispatch, getState) {\n      // console.log('getindex. getstate', getState());\n      var token = _get(getState(), 'user.token'); // const errorHandle = (err) => {\n      //   console.log(err.response)\n      //   if (err.response.status === 401) {\n      //     toast.error('token outdated, please log in');\n      //     dispatch(logout());\n      //     router.push('/');\n      //   } else {\n      //     toast.error(JSON.stringify(err.response.data));\n      //   }\n      // };\n\n\n      var api = new Api().setToken(token);\n      api[apiFuncName](arg).then(function (res) {\n        if (res && actOnSuccess) {\n          if (typeof toastOnSuccess === 'string') toast.success(toastOnSuccess);\n          dispatch(actOnSuccess(res));\n        }\n\n        if (!res) {\n          console.log('error!');\n        }\n      });\n    };\n  };\n}; // all these redux-thunk actions must provide router\n\n/**\n * @example\n * dispatch(asyncGetIndex(router));\n * dispatch(asyncCreatePost(router, arg))\n */\n\n\nexport var asyncGetIndex = apiAuthFactory('getIndex', setIndex);\nexport var asyncGetStacks = apiAuthFactory('getStacks', setStacks);\n/**\n * @example\n * dispatch(asyncSetIndex(router, data));\n */\n\nexport var asyncSetIndex = apiAuthFactory('setIndex', setIndex);\nexport var asyncSetStacks = apiAuthFactory('setIndex', setIndex);\nexport var asyncCreatePost = apiAuthFactory('createPost');","map":{"version":3,"sources":["/Users/gamecoach/codes/portfolio-2019q2/www/actions/info.js"],"names":["_get","logout","Api","toast","SET_INDEX","SET_STACKS","SET_STACK","ADD_POST","setIndex","payload","type","setStacks","setStack","idx","apiAuthFactory","apiFuncName","actOnSuccess","router","arg","toastOnSuccess","dispatch","getState","token","api","setToken","then","res","success","console","log","asyncGetIndex","asyncGetStacks","asyncSetIndex","asyncSetStacks","asyncCreatePost"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,YAAjB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,OAAO,IAAMC,SAAS,GAAG,WAAlB;AACP,OAAO,IAAMC,UAAU,GAAG,YAAnB;AACP,OAAO,IAAMC,SAAS,GAAG,WAAlB;AACP,OAAO,IAAMC,QAAQ,GAAG,UAAjB;AAEP,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,OAAO;AAAA,SAAK;AAClCC,IAAAA,IAAI,EAAEN,SAD4B;AAElCK,IAAAA,OAAO,EAAPA;AAFkC,GAAL;AAAA,CAAxB;AAKP,OAAO,IAAME,SAAS,GAAG,SAAZA,SAAY,CAAAF,OAAO;AAAA,SAAK;AACnCC,IAAAA,IAAI,EAAEL,UAD6B;AAEnCI,IAAAA,OAAO,EAAPA;AAFmC,GAAL;AAAA,CAAzB;AAKP,OAAO,IAAMG,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAAMJ,OAAN;AAAA,SAAmB;AACzCC,IAAAA,IAAI,EAAEJ,SADmC;AAEzCO,IAAAA,GAAG,EAAHA,GAFyC;AAGzCJ,IAAAA,OAAO,EAAPA;AAHyC,GAAnB;AAAA,CAAjB;AAMP;;;;;;;AAMA,IAAMK,cAAc,GAAG,SAAjBA,cAAiB,CAACC,WAAD,EAAcC,YAAd;AAAA,SAA+B,UAACC,MAAD,EAASC,GAAT,EAAcC,cAAd;AAAA,WAAiC,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC7G;AACA,UAAMC,KAAK,GAAGtB,IAAI,CAACqB,QAAQ,EAAT,EAAa,YAAb,CAAlB,CAF6G,CAG7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,UAAME,GAAG,GAAG,IAAIrB,GAAJ,GAAUsB,QAAV,CAAmBF,KAAnB,CAAZ;AACAC,MAAAA,GAAG,CAACR,WAAD,CAAH,CAAiBG,GAAjB,EAAsBO,IAAtB,CAA2B,UAAAC,GAAG,EAAI;AAChC,YAAIA,GAAG,IAAIV,YAAX,EAAyB;AACvB,cAAI,OAAOG,cAAP,KAA0B,QAA9B,EAAwChB,KAAK,CAACwB,OAAN,CAAcR,cAAd;AACxCC,UAAAA,QAAQ,CAACJ,YAAY,CAACU,GAAD,CAAb,CAAR;AACD;;AACD,YAAI,CAACA,GAAL,EAAU;AACRE,UAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACD;AACF,OARD;AASD,KAvBqD;AAAA,GAA/B;AAAA,CAAvB,C,CAyBA;;AACA;;;;;;;AAKA,OAAO,IAAMC,aAAa,GAAGhB,cAAc,CAAC,UAAD,EAAaN,QAAb,CAApC;AACP,OAAO,IAAMuB,cAAc,GAAGjB,cAAc,CAAC,WAAD,EAAcH,SAAd,CAArC;AAEP;;;;;AAIA,OAAO,IAAMqB,aAAa,GAAGlB,cAAc,CAAC,UAAD,EAAaN,QAAb,CAApC;AACP,OAAO,IAAMyB,cAAc,GAAGnB,cAAc,CAAC,UAAD,EAAaN,QAAb,CAArC;AACP,OAAO,IAAM0B,eAAe,GAAGpB,cAAc,CAAC,YAAD,CAAtC","sourcesContent":["import _get from 'lodash/get';\nimport { logout } from './user';\nimport Api from '../utils/Api';\nimport { toast } from \"react-toastify\";\n\nexport const SET_INDEX = 'SET_INDEX';\nexport const SET_STACKS = 'SET_STACKS';\nexport const SET_STACK = 'SET_STACK';\nexport const ADD_POST = 'ADD_POST';\n\nexport const setIndex = payload => ({\n  type: SET_INDEX,\n  payload,\n});\n\nexport const setStacks = payload => ({\n  type: SET_STACKS,\n  payload,\n});\n\nexport const setStack = (idx, payload) => ({\n  type: SET_STACK,\n  idx,\n  payload,\n});\n\n/**\n * create auth function with given api function name and redux action\n * @param {String} [apiFuncName] api's property name\n * @param {Function} [actOnSuccess] action creator\n * @return {function} redux-thunk function\n */\nconst apiAuthFactory = (apiFuncName, actOnSuccess) => (router, arg, toastOnSuccess) => (dispatch, getState) => {\n  // console.log('getindex. getstate', getState());\n  const token = _get(getState(), 'user.token');\n  // const errorHandle = (err) => {\n  //   console.log(err.response)\n  //   if (err.response.status === 401) {\n  //     toast.error('token outdated, please log in');\n  //     dispatch(logout());\n  //     router.push('/');\n  //   } else {\n  //     toast.error(JSON.stringify(err.response.data));\n  //   }\n  // };\n  const api = new Api().setToken(token);\n  api[apiFuncName](arg).then(res => {\n    if (res && actOnSuccess) {\n      if (typeof toastOnSuccess === 'string') toast.success(toastOnSuccess);\n      dispatch(actOnSuccess(res));\n    }\n    if (!res) {\n      console.log('error!');\n    }\n  });\n};\n\n// all these redux-thunk actions must provide router\n/**\n * @example\n * dispatch(asyncGetIndex(router));\n * dispatch(asyncCreatePost(router, arg))\n */\nexport const asyncGetIndex = apiAuthFactory('getIndex', setIndex);\nexport const asyncGetStacks = apiAuthFactory('getStacks', setStacks);\n\n/**\n * @example\n * dispatch(asyncSetIndex(router, data));\n */\nexport const asyncSetIndex = apiAuthFactory('setIndex', setIndex);\nexport const asyncSetStacks = apiAuthFactory('setIndex', setIndex);\nexport const asyncCreatePost = apiAuthFactory('createPost');\n"]},"metadata":{},"sourceType":"module"}