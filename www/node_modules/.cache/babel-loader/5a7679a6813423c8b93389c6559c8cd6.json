{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport Router from 'next/router';\nimport { Cookies } from 'react-cookie';\nimport _get from 'lodash/get';\nimport Api from './Api'; // set up cookies\n\nvar cookies = new Cookies();\nexport function handleAuthSSR(_x) {\n  return _handleAuthSSR.apply(this, arguments);\n}\n\nfunction _handleAuthSSR() {\n  _handleAuthSSR = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(ctx) {\n    var token, api, tokenValidation;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            token = null; // if context has request info aka Server Side\n\n            if (ctx.req) {\n              // ugly way to get cookie value from a string of values\n              // good enough for demostration\n              token = _get(ctx, 'req.headers.cookie', '').replace(/(?:(?:^|.*;\\s*)token\\s*\\=\\s*([^;]*).*$)|^.*$/, '$1');\n            } else {\n              // we dont have request info aka Client Side\n              token = cookies.get('token');\n            }\n\n            api = new Api().setToken(token).onError(function (err) {\n              cookies.remove('token'); // in case of error\n\n              console.log(err.response.data.msg);\n              console.log('redirecting back to login page'); // redirect to login\n\n              if (ctx.res) {\n                ctx.res.writeHead(302, {\n                  Location: '/login'\n                });\n                ctx.res.end();\n              } else {\n                Router.push('/login');\n              }\n            });\n            _context.next = 5;\n            return api.tokenValidate();\n\n          case 5:\n            tokenValidation = _context.sent;\n            console.log('handleAuthSSR - token check result', tokenValidation);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _handleAuthSSR.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/gamecoach/codes/portfolio-2019q2/www/utils/auth.js"],"names":["Router","Cookies","_get","Api","cookies","handleAuthSSR","ctx","token","req","replace","get","api","setToken","onError","err","remove","console","log","response","data","msg","res","writeHead","Location","end","push","tokenValidate","tokenValidation"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,GAAP,MAAgB,OAAhB,C,CACA;;AACA,IAAMC,OAAO,GAAG,IAAIH,OAAJ,EAAhB;AAEA,gBAAsBI,aAAtB;AAAA;AAAA;;;;;2BAAO,iBAA6BC,GAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AACDC,YAAAA,KADC,GACO,IADP,EAGL;;AACA,gBAAID,GAAG,CAACE,GAAR,EAAa;AACX;AACA;AACAD,cAAAA,KAAK,GAAGL,IAAI,CAACI,GAAD,EAAM,oBAAN,EAA4B,EAA5B,CAAJ,CAAoCG,OAApC,CACN,8CADM,EAEN,IAFM,CAAR;AAID,aAPD,MAOO;AACL;AACAF,cAAAA,KAAK,GAAGH,OAAO,CAACM,GAAR,CAAY,OAAZ,CAAR;AACD;;AAGKC,YAAAA,GAjBD,GAiBO,IAAIR,GAAJ,GAAUS,QAAV,CAAmBL,KAAnB,EAA0BM,OAA1B,CAAkC,UAAAC,GAAG,EAAI;AACnDV,cAAAA,OAAO,CAACW,MAAR,CAAe,OAAf,EADmD,CAEnD;;AACAC,cAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,QAAJ,CAAaC,IAAb,CAAkBC,GAA9B;AACAJ,cAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAJmD,CAKnD;;AACA,kBAAIX,GAAG,CAACe,GAAR,EAAa;AACXf,gBAAAA,GAAG,CAACe,GAAJ,CAAQC,SAAR,CAAkB,GAAlB,EAAuB;AACrBC,kBAAAA,QAAQ,EAAE;AADW,iBAAvB;AAGAjB,gBAAAA,GAAG,CAACe,GAAJ,CAAQG,GAAR;AACD,eALD,MAKO;AACLxB,gBAAAA,MAAM,CAACyB,IAAP,CAAY,QAAZ;AACD;AACF,aAdW,CAjBP;AAAA;AAAA,mBAgCyBd,GAAG,CAACe,aAAJ,EAhCzB;;AAAA;AAgCCC,YAAAA,eAhCD;AAiCLX,YAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAkDU,eAAlD;;AAjCK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import Router from 'next/router';\nimport { Cookies } from 'react-cookie';\nimport _get from 'lodash/get';\nimport Api from './Api';\n// set up cookies\nconst cookies = new Cookies();\n\nexport async function handleAuthSSR(ctx) {\n  let token = null;\n\n  // if context has request info aka Server Side\n  if (ctx.req) {\n    // ugly way to get cookie value from a string of values\n    // good enough for demostration\n    token = _get(ctx, 'req.headers.cookie', '').replace(\n      /(?:(?:^|.*;\\s*)token\\s*\\=\\s*([^;]*).*$)|^.*$/,\n      '$1',\n    );\n  } else {\n    // we dont have request info aka Client Side\n    token = cookies.get('token');\n  }\n\n\n  const api = new Api().setToken(token).onError(err => {\n    cookies.remove('token');\n    // in case of error\n    console.log(err.response.data.msg);\n    console.log('redirecting back to login page');\n    // redirect to login\n    if (ctx.res) {\n      ctx.res.writeHead(302, {\n        Location: '/login',\n      });\n      ctx.res.end();\n    } else {\n      Router.push('/login');\n    }\n  });\n  const tokenValidation = await api.tokenValidate();\n  console.log('handleAuthSSR - token check result', tokenValidation);\n}\n"]},"metadata":{},"sourceType":"module"}